*nvchad* Base46 and UI plugin config file

https://github.com/NvChad/ui 
https://github.com/NvChad/base46

                           `  ▄▄         ▄ ▄▄▄▄▄▄▄  `
                           `▄▀███▄     ▄██ █████▀ `
                           `██▄▀███▄   ███        `
                           `███  ▀███▄ ███        `
                           `███    ▀██ ███        `
                           `███      ▀ ███        `
                           `▀██ █████▄▀█▀▄██████▄ `
                           `  ▀ ▀▀▀▀▀▀▀ ▀▀▀▀▀▀▀▀▀▀`

==============================================================================
1. Introduction                                            *nvchad.chadrc.intro*

			     How does it work?
                             ─────────────────

      ` ┌────────────────────────┐       ┌────────────────────────────┐
      ` │      nvconfig.lua     │       │        chadrc.lua         │
      ` ├────────────────────────┤       ├────────────────────────────┤
       │  Has default options  │      │  User options             │
       │                        │       │  These override nvconfig  │
       │  {                     │       └────────────┬───────────────┘
       │    ui = {...},         │                    │
       │    base46 = {...},     │                    │
       │  }                     │                    │
       └────────────────────────┘                    │
                    │                                │
                    └───────────────┬────────────────┘
                                    │      
                                    ▼      
                     The options are merged 
                     Available in |require('nvconfig')|
     	             Then used by UI & Base46 plugin


The file `lua/chadrc.lua` is a config file used to customize NvChad's Base46
& UI plugin and it needs to return a table, example :
>lua
 local M = {}

 M.base46 = {
   theme = "onedark",
   transparency = true,
 }

 return M

------------------------------------------------------------------------------
2.1 UI & Base46 plugin setup                             *nvchad.plugin-install*
>lua
 { "nvim-lua/plenary.nvim", lazy = true },

 { "NvChad/ui", lazy = false },

 {
    "NvChad/base46",
    lazy = true,
    build = function()
      require("base46").load_all_highlights()
    end,
 },

 {
   "nvim-tree/nvim-web-devicons",
   opts = function()
     dofile(vim.g.base46_cache .. "devicons")
     return { override = require "nvchad.icons.devicons" }
   end,
 },

==============================================================================
2. Default Chadrc Options                                *nvchad.chadrc.options*

These are the default options for UI/Base46 plugin. You dont have to write
them all, only those you want to change and the it'll override the default
options.
>lua
 {
   base46 = {
     theme = "onedark",
     hl_add = {},
     hl_override = {},
     integrations = {},
     changed_themes = {},
     transparency = false,
     theme_toggle = { "onedark", "one_light" },
   },

   ui = {
     cmp = {
       icons = true,
       lspkind_text = true,
       style = "default", -- default/flat_light/flat_dark/atom/atom_colored
     },
 
     telescope = { style = "borderless" }, -- borderless / bordered
 
     statusline = {
       theme = "default", -- default/vscode/vscode_colored/minimal
       -- default/round/block/arrow separators work only for default statusline theme
       -- round and block will work for minimal theme only
       separator_style = "default",
       order = nil,
       modules = nil,
     },
 
     -- lazyload it when there are 1+ buffers
     tabufline = {
       enabled = true,
       lazyload = true,
       order = { "treeOffset", "buffers", "tabs", "btns" },
       modules = nil,
     },
 
     nvdash = {
      load_on_startup = false,

      header = {
        "                            ",
        "     ▄▄         ▄ ▄▄▄▄▄▄▄   ",
        "   ▄▀███▄     ▄██ █████▀    ",
        "   ██▄▀███▄   ███           ",
        "   ███  ▀███▄ ███           ",
        "   ███    ▀██ ███           ",
        "   ███      ▀ ███           ",
        "   ▀██ █████▄▀█▀▄██████▄    ",
        "     ▀ ▀▀▀▀▀▀▀ ▀▀▀▀▀▀▀▀▀▀   ",
        "                            ",
        "     Powered By  eovim    ",
        "                            ",
      },

      buttons = {
        { txt = "  Find File", keys = "Spc f f", cmd = "Telescope find_files" },
        { txt = "  Recent Files", keys = "Spc f o", cmd = "Telescope oldfiles" },
        { txt = "-", hl = "NvDashLazy", no_gap = true, rep = true },
        {
          txt = function()
            local stats = require("lazy").stats()
            local ms = math.floor(stats.startuptime) .. " ms"
            return "  Loaded " .. stats.loaded .. "/" .. stats.count .. " plugins in " .. ms
          end,
          hl = "NvDashLazy",
          no_gap = true,
        },
        { txt = "-", hl = "NvDashLazy", no_gap = true, rep = true },
      },
    }
   },
 
   term = {
     winopts = { number = false },
     sizes = { sp = 0.3, vsp = 0.2, ["bo sp"] = 0.3, ["bo vsp"] = 0.2 },
     float = {
       relative = "editor",
       row = 0.3,
       col = 0.25,
       width = 0.5,
       height = 0.4,
       border = "single",
     },
   }, 
 
   lsp = { signature = true },
 
   cheatsheet = {
     theme = "grid", -- simple/grid
     excluded_groups = { "terminal (t)", "autopairs", "Nvim", "Opens" }, -- can add group name or with mode
   },

   mason = { cmd = true, pkgs = {} },

   colorify = {
     enabled = true,
     mode = "virtual", -- fg, bg, virtual
     virt_text = "󱓻 ",
     highlight = { hex = true, lspvars = true },
   },
 }

< 
==============================================================================
2. Tabufline                                               *nvchad.ui.tabufline*

A tabline which shows UI for `buffers` & `tabs`

 - Buffers are tab-scoped too, so buffers from different tabs aren't mixed.
 - Clickable tabs and buffer buttons 
 - Extensible with custom modules 

Example config to add `abc` module
>lua
 M.ui = {
   tabufline = {
     order = { "treeOffset", "buffers", "tabs", "btns", "abc" },
     modules = {
       abc = function()
         return "hi"
       end,
     }
   }
 }

Notes:

- To remove a module, just remove it from order.

- To color a text, wrap it with highlight group
  |"%#Test#"| .. |"hi"|  = Test is the hlgroup => |"%#Test#hi"|

- Separating them with .. makes it more readable

- Color a text & make it clickable
  |"%@foo@"| .. |"%#Test#"| .. |"hi"|  = foo is the vim function name

OR You can use our util functions
>lua
 require("nvchad.tabufline.utils").txt("hi", "Test")
 require("nvchad.tabufline.utils").btn("hi", "Test", "foo")

 -- just define the function on the top!
 local txt = require("nvchad.tabufline.utils").txt
 txt("hi", "HlGroup")

-----------------------------------------------------------------------------
2.1 Tabufline API                                     *nvchad.ui.tabufline.api*

These are some useful |functions| to use the tabufline

`Switch Buffers`
>lua
 require("nvchad.tabufline").prev()
 require("nvchad.tabufline").next()

`Close Buffers`
>lua
 require("nvchad.tabufline").close_buffer()

 -- closes all buffers
 require("nvchad.tabufline").closeAllBufs(true) 
 require("nvchad.tabufline").closeAllBufs(false) -- excludes current buf

 require('nvchad.tabufline').closeBufs_at_direction("left") -- or right

`Move Buffers`

This moves the buffer's position to left/right (-1 for left)
>lua
 require('nvchad.tabufline').move_buf(1) or -1

`API Recipe Example`

All buffer numbers are stored in |vim.t.bufs| tab local variable

This example maps Alt+number keys to switch buffer
>lua
 for i = 1, 9, 1 do
   vim.keymap.set("n", string.format("<A-%s>", i), function()
     vim.api.nvim_set_current_buf(vim.t.bufs[i])
   end)
 end
>
==============================================================================
3. Statusline                                             *nvchad.ui.statusline*

NvChad's statusline is minimal & customizable with least amount of abstraction
for custom modules, it has 4 themes.

Managing modules example: ~
>lua
 M.ui = {
   statusline = {
     theme = "default", 
     separator_style = "default",
     order = { "mode", "f", "git", "%=", "lsp_msg", "%=", "lsp", "cwd", "xyz", "abc" },
     modules = {
       abc = function()
         return "hi"
       end,

       xyz =  "hi",
       f = "%F"
     }
   },
 }

Note:  The |"%F"| is a stl modifier, check `stl` to know list of modifiers
 - The module can be a string/function
 - |"%="| is a separator, modules before 1st separator will be on the left 
        and after the last separator on the right

theme: ~
   |values| = default, vscode, vscode_colored, minimal

separator_style: ~
   |values| = default, round, block, arrow
   Note: the style wont work for vscode themes

Order: ~
  - The order can be found at 
    `https://github.com/NvChad/ui/blob/v2.5/lua/nvchad/stl/utils.lua#L12`

==============================================================================
4. LSP                                                              *nvchad.lsp*

------------------------------------------------------------------------------
4.1 Signature Help                                        *nvchad.lsp.signature*

Enables signature help for LSP, whenever you're inside a function call, the
signature popup window will be shown.
>lua
 M.lsp = {
   signature = true,
 }

------------------------------------------------------------------------------
4.2 Renamer                                                 *nvchad.lsp.renamer*

This is a function will will rename variable under cursor
>lua
 require "nvchad.lsp.renamer"()

==============================================================================
5. Cheatsheet                                                *nvchad.cheatsheet*

This shows mappings in a pretty cheatsheet format on the buffer
>lua
 M.cheatsheet = {
   theme = "grid", -- simple/grid
   excluded_groups = { "terminal (t)", "autopairs", "Nvim", "Opens" }, -- can add group name or with mode
 }

Notes:

- The excluded_groups will remove that group's column from the cheatsheet. 

- For example `terminal` there will remove all columns which had the name "terminal"
  in it (with modename removed) `"terminal (t)"` just removes the terminal column 
  which had |(t)| in it.

==============================================================================
6. Term                                                            *nvchad.term*

Terminal module with useful functions to spawn & toggle terminals at different
positions & with commands 

This config applies for all terminals opened through our term functions:
>lua
 M.term = {
   winopts = { winhl = "Normal:term,WinSeparator:WinSeparator" },
   sizes = { sp = 0.3, vsp = 0.2, ["bo sp"] = 0.3, ["bo vsp"] = 0.2 },
   float = {
     row = 0.3, col = 0.25,
     width = 0.5, height = 0.4,
     border = "single",
   },
 }

Currently only these positions are supported 

- `"sp", "vsp", "bo sp", "bo vsp"` and float is an exception
- sp and vsp are horizontal/vertical splits
- `bo` before their commands makes them occupy full width or height of vim
  window, check |bo|

winopts: ~
 - These are used for setting window options for the terminal window.
 - In the above example, |winhl| is used, which can be used to color the
   terminal window differently.


------------------------------------------------------------------------------
6.1 Terminal API                                               *nvchad.term.api*

These are the functions which open the terminal based on options provided

Available options are: 
>lua
 {
   pos = "sp", -- sp/vsp/float
   cmd = "neofetch" -- string or function 
   size = 0.5 -- # for split windows only
   winopts = {}, -- window options
   id =  "any string" -- needed for toggle/runner func
   float_opts = {} -- # for floating window only, options of :h nvim_open_win 
   clear_cmd = true -- needed for runner func*
 }

------------------------------------------------------------------------------
`New Window`                                                     *nvchad.term.new*
>lua
 require("nvchad.term").new { pos = "sp", size = 0.3 }
 require("nvchad.term").new { pos = "vsp", cmd = "neofetch"}

-------------------------------------------------------------------------------
`Toggle Window`                                                *nvchad.term.toggle*

This function toggles the terminal window, make sure to provide an unique id.
>lua
 require("nvchad.term").toggle { pos = "sp", id = "xz" }
 require("nvchad.term").toggle { pos = "float", id = "fa", cmd ='lazygit' }
 require("nvchad.term").toggle { pos = "vsp", id = "floo", size = 0.3 }

 -- always map it in "t" i.e terminal mode too
 vim.keymap.set({ "n", "t" }, "<A-i>", function()
     require("nvchad.term").toggle { pos = "float", id = "floatTerm" }
 end)

-------------------------------------------------------------------------------
`Code Runner`                                                  *nvchad.term.runner*

This function will first open a terminal + runs the cmd.
Calling the function again will run the cmd in that terminal window
>lua
 require("nvchad.term").runner {
    pos = "vsp",
    cmd = "python test.py",
    id = "ekk",
    clear_cmd = false
 }

NOTE:

As Cmd can be a function too, here's a complex example :
>lua
 require("nvchad.term").runner {
   id = "boo",
   pos = "sp",

   cmd = function()
     local file = vim.fn.expand "%"

     local ft_cmds = {
       python = "python3 " .. file,
       cpp = "clear && g++ -o out " .. file .. " && ./out",
     }

     return ft_cmds[vim.bo.ft]
   end,
 }

==============================================================================
7. Base46 theming                                                *nvchad.base46*

			     How does it work?
                             ─────────────────

             |Functionality|                           
┌──────────────────────────────────────┐              Base46 compiles them
│  Theme file with colors             │            ┌───────────────────────┬┐
│  Integrations i.e highlight groups  ├───────────►│ `Highlight cache files` ││
│  User highlight groups & overrides  │            └────┬──────────────────┴┘
│  Theme specific highlight overrides │                 │
└──────────────────────────────────────┘                 │
                                                         │ (example)  
                                             ┌───────┬───┴───┬────────┐
                                             │       │       │        │
                                             ▼       ▼       ▼        ▼
                                         defaults   cmp  treesitter  nvim-tree


- So basically base46 compiles the highlight groups with modifications into 
  cache files. Running the cache file will load highlight groups.

Note:
To load the cache file, use the |dofile| function
>lua
 dofile(vim.g.base46_cache .. "syntax")

Set the |base46_cache| global before initializing plugins.
>lua
 vim.g.base46_cache = vim.fn.stdpath "data" .. "/base46" 

These are the default highlight groups, load them in init.lua
>lua
 dofile(vim.g.base46_cache .. "syntax")
 dofile(vim.g.base46_cache .. "defaults")
 dofile(vim.g.base46_cache .. "statusline")

Then load the cache files individually, like : 
>lua
  {
    "nvim-treesitter/nvim-treesitter",
    config = function()
      dofile(vim.g.base46_cache .. "treesitter")
      require("nvim-treesitter.configs").setup()
    end,
  }

Note: You can load all cache files at once instead of lazyloding them
>lua
 for _, v in ipairs(vim.fn.readdir(vim.g.base46_cache)) do
   dofile(vim.g.base46_cache .. v)
 end

------------------------------------------------------------------------------
7.1 Highlight override                                *nvchad.base46.highlights*

- Make sure you use a valid highlight group.
- Check your theme colors in the base46 theme dir
- To know which highlight groups are available, check base46 integrations dir
- You can use the variable names from your theme's base_30 table, like black2,
  one_bg etc.

>lua
 M.base46 = {
   hl_override = {
      Pmenu = { bg = "black2" },
      -- Pmenu = { bg = "#ffffff" }, this works too
        
      -- lighten or darken bsae46 theme variable
      -- this will use the black color from nvchad theme & lighten it by 5x
      -- negative number will darken it
      Normal = {
        bg = { "black", 2 }
      },
   },
 }

- To add new highlight groups, use |hl_add|

------------------------------------------------------------------------------
7.2 Customize themes                                 *nvchad.base46.edit_themes*

If you just want to customize an already existing theme, you can use
`base46.changed_themes` option
>lua
 M.base46 = {
   changed_themes = {
      nord = {
         base_16 = { base00 = "#mycol" },
         base_30 = {
            red = "#mycol",
            black2 = "#mycol",
         },
      },

      onedark = { -- and so on! },
   },
 }


------------------------------------------------------------------------------
7.2 Base46 integrations                             *nvchad.base46.integrations*

An integration file is a group of highlight groups, for example cmp
integration, telescope etc.

There are many integration files but only few are
compiled by default, to include other ones, use `base46.integrations` optio
optionn
>lua
 M.base46 = {
   integrations = { "dap", "hop" },
 }

- The base46 compile function includes the above hl groups for compilation
- To load them, use dofile function + full path of the cache file.

 `dofile(vim.g.base46_cache .. "dap")`

Note: 

It's preferred to just put the dofile code in your plugin's config func
>lua
 {
   "folke/trouble.nvim",
    cmd = "Trouble",
    config = function()
       dofile(vim.g.base46_cache .. "trouble")
       require("trouble").setup()
    end
 }

------------------------------------------------------------------------------
7.3 Local themes                                    *nvchad.base46.local_themes*

Just put the theme file in `lua/themes/` folder 

and check the base46 readme for theme file structure 

|https://github.com/NvChad/base46?tab=readme-ov-file#understanding-theme-variables|

==============================================================================
8. Telescope extensions                                       *nvchad.telescope*

There are 2 telescope extensions available : 
 |themes|, |terms|

------------------------------------------------------------------------------
8.1 Base46 themes                                       *nvchad.telescope.themes*

- This will list all base46 themes in telescope window and cycling over them
  will change themes on fly, pressing enter will save the theme to chadrc.lua

Command : `Telescope themes`

------------------------------------------------------------------------------
8.2 Term picker                                          *nvchad.telescope.terms*

- Terminals closed with |require("nvchad.tabufline").close_buffer()| will be
  hidden, you can check `Telescope terms` command to view them back and
  pressing |enter| or |C-v| or |C-x| will unhide the terminal.



vim:tw=78:ts=8:noet:ft=help:norl:

